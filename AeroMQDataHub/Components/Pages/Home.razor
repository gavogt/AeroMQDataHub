@page "/"

@using System.Text.Json
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Nav

<h1>Flight Telemetry</h1>

@if (hubConnection is null)
{
    <p><em>Connecting....</em></p>
}
else if (hubConnection.State != HubConnectionState.Connected)
{
    <p><em>Reconnecting...</em></p>
}
else
{
    <div class="row g-2">
        @if (telemetry.Any())
        {
            var t = telemetry[0];
            <div class="col-6 col-md-4 col-lg2">
                <div class="card text-center">
                    <card class="card-header">Roll</card>
                    <div class="card-body"><h2>@t.Roll:F1°</h2></div>
                </div>
            </div>
            <div class="col-6 col-md-4 col-lg2">
                <div class="card text-center">
                    <card class="card-header">Pitch</card>
                    <div class="card-body"><h2>@t.Pitch:F1°</h2></div>
                </div>
            </div>
            <div class="col-6 col-md-4 col-lg2">
                <div class="card text-center">
                    <card class="card-header">Yaw</card>
                    <div class="card-body"><h2>@t.Yaw:F0°</h2></div>
                </div>
            </div>
            <div class="col-6 col-md-4 col-lg2">
                <div class="card text-center">
                    <card class="card-header">Voltage</card>
                    <div class="card-body"><h2>@t.Volts:F2 V</h2></div>
                </div>
            </div>
            <div class="col-6 col-md-4 col-lg2">
                <div class="card text-center">
                    <card class="card-header">Current</card>
                    <div class="card-body"><h2>@t.Amps:F2 A</h2></div>
                </div>
            </div>
        }
    </div>
}

@code {
    HubConnection? hubConnection;
    public List<Telemetry> telemetry = new();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:8080/telemetryHub")
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("TelemetryUpdate", json =>
        {
            var t = JsonSerializer.Deserialize<Telemetry>(json);
            if (t is not null)
            {
                telemetry.Insert(0, t);
                if (telemetry.Count > 20)
                    telemetry.RemoveAt(telemetry.Count - 1);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }
}